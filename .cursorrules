You are an expert in TypeScript, Next.js App Router, React, and Tailwind. Follow @Next.js 14 App Router docs for Data Fetching, Rendering, and Routing. Use Vercel AI SDK for handling AI interactions and streaming responses.

- This is a project management app for a traffic/transportation engineering consulting firm, focused on visually tracking projects through customizable stages and tasks.
- The frontend is modular, with all code in the /src folder.
  - src/app: page.tsx, layout.tsx, and main app entry
  - src/app/api: API routes (OpenAI, Anthropic, Replicate, Deepgram, etc.)
  - src/app/components: All React components (ProjectBoard, ProjectItem, TaskList, GanttChart, ProjectStats, TeamSection, TaskCategoryManager, etc.)
  - src/app/lib: Types, helpers, hooks, and contexts (including Firebase, Auth, Deepgram, etc.)
- Use demo data for projects/tasks unless otherwise specified. Avoid random values that cause hydration errors.
- UI/UX conventions:
  - Modern dashboard with tabbed interface (Dashboard, Timeline/Gantt, Team, Task Categories, Analytics)
  - Status badges, color coding, dark mode, and animated transitions
  - Collapsible filter sections to maximize screen space with filter status indicators
  - Filtering, sorting, and drag-and-drop for tasks and categories
  - Data visualizations for project analytics
  - Confirmation dialogs for all deletion actions (projects, tasks, team members, notes)
  - Unsaved changes protection when canceling forms
  - Interactive Gantt chart with project bar resizing and zooming functionality:
    - Timeline bars have drag-to-resize handles on both ends
    - Left handle adjusts project start date
    - Right handle adjusts project due/end date
    - Visual feedback during resize with date tooltips
    - Updates project data in database when resizing completes
- Always use Next.js App Router (app directory), TailwindCSS, and TypeScript.
- Use Vercel AI SDK for all AI/LLM interactions and streaming.
- Firebase utilities are available but only use if persistent backend is required.
- All new features/components should be modular and placed in /src/app/components.
- Maintain accessibility and responsive design throughout the app.

There are some pre-configured APIs in this template that can be used but only if required by the current project. These have already been created:
- Firebase
  - In src/lib/firebase there is a firebase.ts configuration file as well as firebaseUtils.ts for various utility functions when interacting with Firebase Database, Storage, and Authencation
  - In src/lib/contexts there is an AuthContext.tsx file that has user authentication with Firebase set up with the onAuthStateChanged listener.
  - In src/lib/hooks there is a useAuth.ts hook
- OpenAI 
  - src/app/api/openai has chat/route.ts which is a simple API calling streamText from openai using the Vercel AI library
- Anthropic
  - src/app/api/anthropic has chat/route.ts which is a simple API calling streamText from Anthropic using the Vercel AI library
- Replicate
  - src/app/api/replicate has generate-image/route.ts which is a simple API calling the Stable Diffusion model hosted on Replicate to generate images
- Deepgram
  - src/app/api/deepgram has transcribe-audio/route.ts which is a simple API that returns the Deepgram API key to be used in the client side to transcribe audio in real-time.
  - src/lib/contexts has a DeepgramContext.tsx file that has the Deepgram API key set up with the useDeepgram hook to be used in any component.